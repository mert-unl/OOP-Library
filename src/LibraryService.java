import enums.Category;
import enums.Status;

import java.util.*;

public class LibraryService {
    private final Library library;
    private final Scanner input;

    public LibraryService(Library library, Scanner input) {
        this.library = library;
        this.input = input;
    }

    public void kitapEkle() {

        System.out.print("Kitap ID: ");
        long bookId = input.nextLong();
        input.nextLine();

        Author selectedAuthor = null;

        System.out.println("Yazar Se√ßimi:");
        System.out.println("1. Mevcut yazardan se√ß");
        System.out.println("2. Yeni yazar olu≈ütur");
        System.out.print("Se√ßiminiz: ");
        int authorChoice = input.nextInt();
        input.nextLine();

        if (authorChoice == 1 && !library.getAuthorList().isEmpty()) {
            List<Author> authors = new ArrayList<>(library.getAuthorList());
            for (int i = 0; i < authors.size(); i++) {
                System.out.println((i + 1) + ". " + authors.get(i).getName());
            }
            System.out.print("Se√ßmek istediƒüiniz yazarƒ±n numarasƒ±: ");
            int selectedIndex = input.nextInt();
            input.nextLine();

            if (selectedIndex > 0 && selectedIndex <= authors.size()) {
                selectedAuthor = authors.get(selectedIndex - 1);
            } else {
                System.out.println("‚ùå Ge√ßersiz se√ßim. Yeni yazar olu≈üturulacak.");
            }
        }

        if (selectedAuthor == null) {
            System.out.print("Yeni yazar ismi girin: ");
            String newAuthorName = input.nextLine();
            selectedAuthor = new Author(newAuthorName);
            library.addAuthor(selectedAuthor);
        }


        System.out.print("Kitap Adƒ±: ");
        String bookName = input.nextLine();

        System.out.println("Kategori Se√ßiniz:");
        Category[] categories = Category.values();
        for (int i = 0; i < categories.length; i++) {
            System.out.println((i + 1) + ". " + categories[i]);
        }
        System.out.print("Kategori numarasƒ±: ");
        int categoryIndex = input.nextInt() - 1;
        input.nextLine();

        Category category;
        if (categoryIndex >= 0 && categoryIndex < categories.length) {
            category = categories[categoryIndex];
        } else {
            System.out.println("Ge√ßersiz kategori, varsayƒ±lan olarak StudyBooks atanƒ±yor.");
            category = Category.StudyBooks;
        }


        System.out.print("Fiyat: ");
        int price = input.nextInt();
        input.nextLine();


        System.out.print("Durum Se√ßiniz: " + "\n");
        Status[] statusValues = Status.values();

        for (int i = 0; i < statusValues.length; i++) {
            System.out.println((i + 1) + ". " + statusValues[i]);
        }

        int statusIndex = input.nextInt() - 1;
        input.nextLine();

        Status selectedStatus;
        if (statusIndex >= 0 && statusIndex < statusValues.length) {
            selectedStatus = statusValues[statusIndex];
        } else {
            System.out.println("Ge√ßersiz se√ßim, varsayƒ±lan olarak MEVCUT atanƒ±yor.");
            selectedStatus = Status.MEVCUT;
        }


        System.out.print("Baskƒ± No: ");
        int edition = input.nextInt();
        input.nextLine();

        Date dateOfPurchase = new Date();

        Book book = new Book(bookId, selectedAuthor, bookName, category, price, selectedStatus, edition, dateOfPurchase);
        library.getBookList().add(book);
        selectedAuthor.newBook(book);

        System.out.println("‚úÖ Kitap ba≈üarƒ±yla eklendi.");

    }

    public void kitapListele() {

        System.out.println("Kitaplarƒ± neye g√∂re listemek istiyorsunuz?");
        System.out.println("1- K√ºt√ºphanede ki t√ºm kitaplar.");
        System.out.println("2- Yazarƒ±n t√ºm kitaplarƒ±.");
        System.out.println("3- Kategoride ki  t√ºm kitaplar");
        int listStyle = input.nextInt();
        if (listStyle == 1) {
            System.out.println("\nüìö T√ºm Kitaplarƒ±n Listesi:");
            for (Book b : library.getBookList()) {
                System.out.println(b);
            }
        } else if (listStyle == 2) {
            System.out.println("Yazar se√ß");
            input.nextLine();
            Author selectedAuthor = null;

            if (!library.getAuthorList().isEmpty()) {
                List<Author> authors = new ArrayList<>(library.getAuthorList());
                for (int i = 0; i < authors.size(); i++) {
                    System.out.println((i + 1) + ". " + authors.get(i).getName());
                }
                System.out.print("Se√ßmek istediƒüiniz yazarƒ±n numarasƒ±: ");
                int selectedIndex = input.nextInt();
                input.nextLine();

                if (selectedIndex > 0 && selectedIndex <= authors.size()) {
                    selectedAuthor = authors.get(selectedIndex - 1);
                    selectedAuthor.showBooks();
                } else {
                    System.out.println("Ge√ßersiz komut.");
                }
            }
        } else if (listStyle == 3) {
            if (!library.getBookList().isEmpty()) {
                System.out.println("L√ºtfen bir kategori se√ßiniz:");
                Category[] categories = Category.values();
                for (int i = 0; i < categories.length; i++) {
                    System.out.println((i + 1) + ". " + categories[i]);
                }

                int selected = input.nextInt();
                input.nextLine(); // buffer temizliƒüi

                if (selected > 0 && selected <= categories.length) {
                    Category selectedCategory = categories[selected - 1];
                    List<Book> booksInCategory = library.getBooksByCategory(selectedCategory);
                    if (booksInCategory.isEmpty()) {
                        System.out.println("Bu kategoride hen√ºz kitap yok.");
                    } else {
                        System.out.println("\nüìÇ " + selectedCategory + " kategorisindeki kitaplar:");
                        for (Book book : booksInCategory) {
                            System.out.println(book.toString());
                        }
                    }
                } else {
                    System.out.println("Ge√ßersiz kategori se√ßimi.");
                }
            } else {
                System.out.println("Hen√ºz hi√ß kitap eklenmemi≈ü.");
            }
        } else {
            System.out.println("Ge√ßersiz komut.");
        }

    }

    public void kitapSil() {
        System.out.print("Silmek istediƒüiniz kitabƒ±n ID'sini yazƒ±n: ");
        long deleteId = input.nextLong();
        input.nextLine();

        library.removeBookById(deleteId);

    }

    public void kitapGuncelle() {
        if (library.getBookList().isEmpty()) {
            System.out.println("Hen√ºz hi√ß kitap eklenmemi≈ü.");

        }

        System.out.println("G√ºncellemek istediƒüiniz kitabƒ± se√ßin:");
        for (int i = 0; i < library.getBookList().size(); i++) {
            Book b = library.getBookList().get(i);
            System.out.println((i + 1) + ". " + b.getBookName() + " (ID: " + b.getBookId() + ")");
        }

        System.out.print("Se√ßim numarasƒ±: ");
        int selected = input.nextInt();
        input.nextLine();

        if (selected < 1 || selected > library.getBookList().size()) {
            System.out.println("‚ùå Ge√ßersiz se√ßim.");
        }

        Book selectedBook = library.getBookList().get(selected - 1);
        System.out.println("Se√ßilen Kitap: " + selectedBook.getBookName());

        // Yeni bilgiler alƒ±nƒ±yor
        System.out.print("Yeni kitap adƒ±: ");
        String newName = input.nextLine();

        System.out.print("Yeni fiyat: ");
        int newPrice = input.nextInt();
        input.nextLine();

        System.out.println("Yeni Durum Se√ßiniz:");
        Status[] statusValues = Status.values();
        for (int i = 0; i < statusValues.length; i++) {
            System.out.println((i + 1) + ". " + statusValues[i]);
        }

        System.out.print("Se√ßiminiz: ");
        int statusIndex = input.nextInt() - 1;
        input.nextLine();

        Status newStatus;
        if (statusIndex >= 0 && statusIndex < statusValues.length) {
            newStatus = statusValues[statusIndex];
        } else {
            System.out.println("Ge√ßersiz se√ßim, varsayƒ±lan olarak MEVCUT atanƒ±yor.");
            newStatus = Status.MEVCUT;
        }

        System.out.print("Yeni baskƒ± no: ");
        int newEdition = input.nextInt();
        input.nextLine();

        System.out.println("Yeni kategori se√ß:");
        Category[] categories = Category.values();
        for (int i = 0; i < categories.length; i++) {
            System.out.println((i + 1) + ". " + categories[i]);
        }
        int newCatIndex = input.nextInt() - 1;
        input.nextLine();

        Category newCategory = (newCatIndex >= 0 && newCatIndex < categories.length) ? categories[newCatIndex] : Category.StudyBooks;

        Author newAuthor = null;
        System.out.println("Yazar Se√ßimi:");
        System.out.println("1. Mevcut yazardan se√ß");
        System.out.println("2. Yeni yazar olu≈ütur");
        int yazarSecim = input.nextInt();
        input.nextLine();

        if (yazarSecim == 1 && !library.getAuthorList().isEmpty()) {
            for (int i = 0; i < library.getAuthorList().size(); i++) {
                System.out.println((i + 1) + ". " + library.getAuthorList().get(i).getName());
            }
            System.out.print("Yazar numarasƒ±: ");
            int authorIndex = input.nextInt();
            input.nextLine();
            if (authorIndex >= 1 && authorIndex <= library.getAuthorList().size()) {
                newAuthor = library.getAuthorList().get(authorIndex - 1);
            } else {
                System.out.println("‚ùå Ge√ßersiz se√ßim. Yeni yazar olu≈üturulacak.");
            }
        }

        if (newAuthor == null) {
            System.out.print("Yeni yazar ismi girin: ");
            String authorName = input.nextLine();
            newAuthor = new Author(authorName);
            library.getAuthorList().add(newAuthor);
        }

        Book updatedBook = new Book(
                selectedBook.getBookId(),
                newAuthor,
                newName,
                newCategory,
                newPrice,
                newStatus,
                newEdition,
                selectedBook.getDateOfPurchase()
        );

        library.getBookList().set(selected - 1, updatedBook);

        System.out.println("‚úÖ Kitap ba≈üarƒ±yla g√ºncellendi.");
    }

    public void kitapSec() {
        System.out.println("Hangi deƒüere g√∂re kitap se√ßmek istiyorsunuz?");
        System.out.println("1- ID'ye g√∂re kitap se√ß.");
        System.out.println("2- ƒ∞sme g√∂re kitap se√ß.");
        System.out.println("3- Yazara g√∂re kitap se√ß.");
        int secenek = input.nextInt();
        input.nextLine();

        if (secenek == 1) {
            System.out.print("Kitap ID giriniz: ");
            int id = input.nextInt();
            input.nextLine();

            boolean bulundu = false;
            for (Book b : library.getBookList()) {
                if (b.getBookId() == id) {
                    System.out.println(b);
                    bulundu = true;
                    break;
                }
            }
            if (!bulundu) System.out.println("Bu ID'ye sahip kitap bulunamadƒ±.");
        } else if (secenek == 2) {
            System.out.print("Kitap adƒ±nƒ± giriniz: ");
            String isim = input.nextLine();

            boolean bulundu = false;
            for (Book b : library.getBookList()) {
                if (b.getBookName().equalsIgnoreCase(isim)) {
                    System.out.println(b);
                    bulundu = true;
                }
            }
            if (!bulundu) System.out.println("Bu isme sahip kitap bulunamadƒ±.");
        } else if (secenek == 3) {
            System.out.println("Yazarlar:");
            List<Author> yazarListesi = library.getAuthorList();
            for (int i = 0; i < yazarListesi.size(); i++) {
                System.out.println((i + 1) + "- " + yazarListesi.get(i).getName());
            }

            System.out.print("Yazarƒ± se√ßiniz: ");
            int yazarSecim = input.nextInt();
            input.nextLine();

            if (yazarSecim < 1 || yazarSecim > yazarListesi.size()) {
                System.out.println("Ge√ßersiz se√ßim.");
            } else {
                Author secilenYazar = yazarListesi.get(yazarSecim - 1);
                List<Book> yazarKitaplari = new ArrayList<>();

                for (Book b : library.getBookList()) {
                    if (b.getAuthor().equals(secilenYazar)) {
                        yazarKitaplari.add(b);
                    }
                }

                if (yazarKitaplari.isEmpty()) {
                    System.out.println("Bu yazara ait kitap bulunamadƒ±.");
                } else {
                    System.out.println("\n" + secilenYazar.getName() + " adlƒ± yazara ait kitaplar:");
                    for (int i = 0; i < yazarKitaplari.size(); i++) {
                        System.out.println((i + 1) + "- " + yazarKitaplari.get(i).getBookName());
                    }

                    System.out.print("Bir kitap se√ßiniz: ");
                    int kitapSecim = input.nextInt();
                    input.nextLine();

                    if (kitapSecim < 1 || kitapSecim > yazarKitaplari.size()) {
                        System.out.println("Ge√ßersiz kitap se√ßimi.");
                    } else {
                        Book secilenKitap = yazarKitaplari.get(kitapSecim - 1);
                        System.out.println("\nSe√ßilen Kitap Bilgisi:");
                        System.out.println(secilenKitap);
                    }
                }
            }
        }
    }

}
